// vite.config.ts
import { defineConfig, loadEnv } from "file:///Users/mayowa/Documents/projects/switchly-swap/node_modules/vite/dist/node/index.js";
import react from "file:///Users/mayowa/Documents/projects/switchly-swap/node_modules/@vitejs/plugin-react-swc/index.mjs";
var vite_config_default = defineConfig(({ mode }) => {
  const env = loadEnv(mode, process.cwd(), "");
  const SWITCHLY_HOST = env.VITE_SWITCHLY_HOST || "64.23.228.195";
  const SWITCHLY_API_PORT = env.VITE_SWITCHLY_API_PORT || "1317";
  const SWITCHLY_MIDGARD_PORT = env.VITE_SWITCHLY_MIDGARD_PORT || "8080";
  const DEV_SERVER_PORT = parseInt("8080");
  const SWITCHLY_API_TARGET = `http://${SWITCHLY_HOST}:${SWITCHLY_API_PORT}`;
  const SWITCHLY_MIDGARD_TARGET = `http://${SWITCHLY_HOST}:${SWITCHLY_MIDGARD_PORT}`;
  console.log("\u{1F527} Vite Proxy Configuration:");
  console.log("  - Switchly API Target:", SWITCHLY_API_TARGET);
  console.log("  - Switchly Midgard Target:", SWITCHLY_MIDGARD_TARGET);
  console.log("  - Dev Server Port:", DEV_SERVER_PORT);
  return {
    plugins: [
      react()
      // mkcert()
    ],
    server: {
      host: "0.0.0.0",
      port: DEV_SERVER_PORT,
      proxy: {
        "/api/switchly": {
          target: SWITCHLY_API_TARGET,
          changeOrigin: true,
          rewrite: (path) => path.replace(/^\/api\/switchly/, "/switchly"),
          configure: (proxy, _options) => {
            proxy.on("proxyReq", (proxyReq, req, _res) => {
              const url = req.url || "";
              console.log("\u{1F504} Proxying request:", req.method, url, "->", SWITCHLY_API_TARGET + url.replace("/api/switchly", "/switchly"));
            });
          }
        },
        "/api/midgard": {
          target: SWITCHLY_MIDGARD_TARGET,
          changeOrigin: true,
          rewrite: (path) => path.replace(/^\/api\/midgard/, ""),
          configure: (proxy, _options) => {
            proxy.on("proxyReq", (proxyReq, req, _res) => {
              const url = req.url || "";
              console.log("\u{1F504} Proxying request:", req.method, url, "->", SWITCHLY_MIDGARD_TARGET + url.replace("/api/midgard", ""));
            });
          }
        }
      }
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvbWF5b3dhL0RvY3VtZW50cy9wcm9qZWN0cy9zd2l0Y2hseS1zd2FwXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvbWF5b3dhL0RvY3VtZW50cy9wcm9qZWN0cy9zd2l0Y2hseS1zd2FwL3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9tYXlvd2EvRG9jdW1lbnRzL3Byb2plY3RzL3N3aXRjaGx5LXN3YXAvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcsIGxvYWRFbnYgfSBmcm9tICd2aXRlJ1xuaW1wb3J0IHJlYWN0IGZyb20gJ0B2aXRlanMvcGx1Z2luLXJlYWN0LXN3Yydcbi8vIGltcG9ydCBta2NlcnQgZnJvbSAndml0ZS1wbHVnaW4tbWtjZXJ0J1xuXG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKCh7IG1vZGUgfSkgPT4ge1xuICAvLyBMb2FkIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICBjb25zdCBlbnYgPSBsb2FkRW52KG1vZGUsIHByb2Nlc3MuY3dkKCksICcnKTtcbiAgXG4gIC8vIEVudmlyb25tZW50IHZhcmlhYmxlcyBmb3Igc2VydmljZSBVUkxzXG4gIGNvbnN0IFNXSVRDSExZX0hPU1QgPSBlbnYuVklURV9TV0lUQ0hMWV9IT1NUIHx8ICc2NC4yMy4yMjguMTk1JztcbiAgY29uc3QgU1dJVENITFlfQVBJX1BPUlQgPSBlbnYuVklURV9TV0lUQ0hMWV9BUElfUE9SVCB8fCAnMTMxNyc7XG4gIGNvbnN0IFNXSVRDSExZX01JREdBUkRfUE9SVCA9IGVudi5WSVRFX1NXSVRDSExZX01JREdBUkRfUE9SVCB8fCAnODA4MCc7XG4gIGNvbnN0IERFVl9TRVJWRVJfUE9SVCA9IHBhcnNlSW50KCc4MDgwJyk7XG5cbiAgY29uc3QgU1dJVENITFlfQVBJX1RBUkdFVCA9IGBodHRwOi8vJHtTV0lUQ0hMWV9IT1NUfToke1NXSVRDSExZX0FQSV9QT1JUfWA7XG4gIGNvbnN0IFNXSVRDSExZX01JREdBUkRfVEFSR0VUID0gYGh0dHA6Ly8ke1NXSVRDSExZX0hPU1R9OiR7U1dJVENITFlfTUlER0FSRF9QT1JUfWA7XG5cbiAgY29uc29sZS5sb2coJ1x1RDgzRFx1REQyNyBWaXRlIFByb3h5IENvbmZpZ3VyYXRpb246Jyk7XG4gIGNvbnNvbGUubG9nKCcgIC0gU3dpdGNobHkgQVBJIFRhcmdldDonLCBTV0lUQ0hMWV9BUElfVEFSR0VUKTtcbiAgY29uc29sZS5sb2coJyAgLSBTd2l0Y2hseSBNaWRnYXJkIFRhcmdldDonLCBTV0lUQ0hMWV9NSURHQVJEX1RBUkdFVCk7XG4gIGNvbnNvbGUubG9nKCcgIC0gRGV2IFNlcnZlciBQb3J0OicsIERFVl9TRVJWRVJfUE9SVCk7XG5cbiAgcmV0dXJuIHtcbiAgICBwbHVnaW5zOiBbcmVhY3QoKSwgXG4gICAgICAvLyBta2NlcnQoKVxuICAgIF0sXG4gICAgc2VydmVyOiB7XG4gICAgICBob3N0OiAnMC4wLjAuMCcsXG4gICAgICBwb3J0OiBERVZfU0VSVkVSX1BPUlQsXG4gICAgICBwcm94eToge1xuICAgICAgICAnL2FwaS9zd2l0Y2hseSc6IHtcbiAgICAgICAgICB0YXJnZXQ6IFNXSVRDSExZX0FQSV9UQVJHRVQsXG4gICAgICAgICAgY2hhbmdlT3JpZ2luOiB0cnVlLFxuICAgICAgICAgIHJld3JpdGU6IChwYXRoKSA9PiBwYXRoLnJlcGxhY2UoL15cXC9hcGlcXC9zd2l0Y2hseS8sICcvc3dpdGNobHknKSxcbiAgICAgICAgICBjb25maWd1cmU6IChwcm94eSwgX29wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHByb3h5Lm9uKCdwcm94eVJlcScsIChwcm94eVJlcSwgcmVxLCBfcmVzKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHVybCA9IHJlcS51cmwgfHwgJyc7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdcdUQ4M0RcdUREMDQgUHJveHlpbmcgcmVxdWVzdDonLCByZXEubWV0aG9kLCB1cmwsICctPicsIFNXSVRDSExZX0FQSV9UQVJHRVQgKyB1cmwucmVwbGFjZSgnL2FwaS9zd2l0Y2hseScsICcvc3dpdGNobHknKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICcvYXBpL21pZGdhcmQnOiB7XG4gICAgICAgICAgdGFyZ2V0OiBTV0lUQ0hMWV9NSURHQVJEX1RBUkdFVCxcbiAgICAgICAgICBjaGFuZ2VPcmlnaW46IHRydWUsXG4gICAgICAgICAgcmV3cml0ZTogKHBhdGgpID0+IHBhdGgucmVwbGFjZSgvXlxcL2FwaVxcL21pZGdhcmQvLCAnJyksXG4gICAgICAgICAgY29uZmlndXJlOiAocHJveHksIF9vcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBwcm94eS5vbigncHJveHlSZXEnLCAocHJveHlSZXEsIHJlcSwgX3JlcykgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB1cmwgPSByZXEudXJsIHx8ICcnO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXHVEODNEXHVERDA0IFByb3h5aW5nIHJlcXVlc3Q6JywgcmVxLm1ldGhvZCwgdXJsLCAnLT4nLCBTV0lUQ0hMWV9NSURHQVJEX1RBUkdFVCArIHVybC5yZXBsYWNlKCcvYXBpL21pZGdhcmQnLCAnJykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59KVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUE0VCxTQUFTLGNBQWMsZUFBZTtBQUNsVyxPQUFPLFdBQVc7QUFJbEIsSUFBTyxzQkFBUSxhQUFhLENBQUMsRUFBRSxLQUFLLE1BQU07QUFFeEMsUUFBTSxNQUFNLFFBQVEsTUFBTSxRQUFRLElBQUksR0FBRyxFQUFFO0FBRzNDLFFBQU0sZ0JBQWdCLElBQUksc0JBQXNCO0FBQ2hELFFBQU0sb0JBQW9CLElBQUksMEJBQTBCO0FBQ3hELFFBQU0sd0JBQXdCLElBQUksOEJBQThCO0FBQ2hFLFFBQU0sa0JBQWtCLFNBQVMsTUFBTTtBQUV2QyxRQUFNLHNCQUFzQixVQUFVLGFBQWEsSUFBSSxpQkFBaUI7QUFDeEUsUUFBTSwwQkFBMEIsVUFBVSxhQUFhLElBQUkscUJBQXFCO0FBRWhGLFVBQVEsSUFBSSxxQ0FBOEI7QUFDMUMsVUFBUSxJQUFJLDRCQUE0QixtQkFBbUI7QUFDM0QsVUFBUSxJQUFJLGdDQUFnQyx1QkFBdUI7QUFDbkUsVUFBUSxJQUFJLHdCQUF3QixlQUFlO0FBRW5ELFNBQU87QUFBQSxJQUNMLFNBQVM7QUFBQSxNQUFDLE1BQU07QUFBQTtBQUFBLElBRWhCO0FBQUEsSUFDQSxRQUFRO0FBQUEsTUFDTixNQUFNO0FBQUEsTUFDTixNQUFNO0FBQUEsTUFDTixPQUFPO0FBQUEsUUFDTCxpQkFBaUI7QUFBQSxVQUNmLFFBQVE7QUFBQSxVQUNSLGNBQWM7QUFBQSxVQUNkLFNBQVMsQ0FBQyxTQUFTLEtBQUssUUFBUSxvQkFBb0IsV0FBVztBQUFBLFVBQy9ELFdBQVcsQ0FBQyxPQUFPLGFBQWE7QUFDOUIsa0JBQU0sR0FBRyxZQUFZLENBQUMsVUFBVSxLQUFLLFNBQVM7QUFDNUMsb0JBQU0sTUFBTSxJQUFJLE9BQU87QUFDdkIsc0JBQVEsSUFBSSwrQkFBd0IsSUFBSSxRQUFRLEtBQUssTUFBTSxzQkFBc0IsSUFBSSxRQUFRLGlCQUFpQixXQUFXLENBQUM7QUFBQSxZQUM1SCxDQUFDO0FBQUEsVUFDSDtBQUFBLFFBQ0Y7QUFBQSxRQUNBLGdCQUFnQjtBQUFBLFVBQ2QsUUFBUTtBQUFBLFVBQ1IsY0FBYztBQUFBLFVBQ2QsU0FBUyxDQUFDLFNBQVMsS0FBSyxRQUFRLG1CQUFtQixFQUFFO0FBQUEsVUFDckQsV0FBVyxDQUFDLE9BQU8sYUFBYTtBQUM5QixrQkFBTSxHQUFHLFlBQVksQ0FBQyxVQUFVLEtBQUssU0FBUztBQUM1QyxvQkFBTSxNQUFNLElBQUksT0FBTztBQUN2QixzQkFBUSxJQUFJLCtCQUF3QixJQUFJLFFBQVEsS0FBSyxNQUFNLDBCQUEwQixJQUFJLFFBQVEsZ0JBQWdCLEVBQUUsQ0FBQztBQUFBLFlBQ3RILENBQUM7QUFBQSxVQUNIO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
